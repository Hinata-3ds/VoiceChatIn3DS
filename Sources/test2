// #include "cheats.hpp"
// #include <stdio.h>
// #include <stdlib.h>
// #include <string.h>
// #include <unistd.h>
// #include <arpa/inet.h>
// #include "csvc.h"
// #include "C:/devkitPro/libctru/include/3ds/services/mic.h"
// #include "Led.hpp"
// #include "ncsnd.h"
// #include <vector>
// #include <fcntl.h>
// #include "Socket.hpp"
// #define BUFFER_SIZE 0x20000
// //#define SERVER_IP "127.0.0.1" 


// namespace CTRPluginFramework
// {
// std::string g_serverIP; 
// int g_port = 0;
// std::vector<std::string> SendConsole = {};
// std::vector<std::string> ReceiveConsole = {};

// u32 audioBuffer_pos = 0;
// u32 micBuffer_pos = 0;
// u32 micBuffer_readpos = 0;
// u8 *receivedSoundBuffer = nullptr;
// u32 dataSize = 0;

// static Socket soc;
// std::vector<u8> sendData;
// std::vector<u8> receivedData[2];
// int currentIndex = 0;
// Handle sendEvent;
// Handle stopSendEvent;
// Handle restartReceiveEvent;
// Handle exitThreadEvent;

// bool init = true; 


// bool CloseGameMicHandle(void);

// void InputIPAddressAndPort(MenuEntry *entry) {
//     Keyboard kb("Input Server IP Address and Port");

//     std::string ipAndPort;
//     int result = kb.Open(ipAndPort);
//     kb.IsHexadecimal(false);
//     if(result == -1){
//         MessageBox("Error occurred");
//         return;
//     }
//     else if (result == -2) {
//         MessageBox("Canceled")();
//         return;
//     }

//     size_t pos = ipAndPort.find(':');
//     if (pos == std::string::npos) {
//         MessageBox("Invalid input format")();
//         return;
//     }

//     std::string serverIP = ipAndPort.substr(0, pos);
//     std::string portStr = ipAndPort.substr(pos + 1);

//     // サーバーIPアドレスの保存
//     g_serverIP = serverIP;

//     // ポート番号の保存
//     try {
//         g_port = std::stoi(portStr);
//     } catch (const std::exception &exp) {
//         MessageBox("Invalid port number format")();
//         return;
//     }

//     MessageBox("IP Address and Port Number saved")();
//     // entry->SetGameFunc(); 後で
// }


// // Send Thread
// void VoiceSendThread(void *arg) {
//     int sockfd = *((int *)arg);

//     while (1) {
//         Controller::Update();

//         // A キーが押されたら音声送信を開始
//         if (init && Controller::IsKeyPressed(Key::A)) {
//             audioBuffer_pos = 0;
//             micBuffer_pos = 0;  

//             if (R_FAILED(MICU_StartSampling(MICU_ENCODING_PCM16_SIGNED, MICU_SAMPLE_RATE_16360, 0, micGetSampleDataSize(), true))) {
//                 SendConsole.push_back("Sampling could not be initiated.\n");
//             } else {
//                 SendConsole.push_back("Sampling has begun.\n");
//                 svcSignalEvent(sendEvent);
//             }
//         }

//         // A キーが押され続けられ、音声バッファのサイズに到達していない場合
//         if (init && Controller::IsKeyDown(Key::A) && audioBuffer_pos < SOUND_BUFFER_SIZE) {
//             s32 index;
//             Result res = svcWaitSynchronizationN(&index, &stopSendEvent, 1, false, U64_MAX);
//             if (R_SUCCEEDED(res) && index == 0) {
//                 break;
//             }
            
//             u32 micBuffer_readpos = micBuffer_pos;
//             micBuffer_pos = micGetLastSampleOffset();

//             while (audioBuffer_pos < SOUND_BUFFER_SIZE && micBuffer_readpos != micBuffer_pos) {
//                 soundBuffer[audioBuffer_pos++] = micBuffer[micBuffer_readpos];
//                 micBuffer_readpos = (micBuffer_readpos + 1) % MIC_BUFFER_SIZE;

//                 // sendDataにデータを追加し、currentIndexでインデックスを制御
//                 sendData.insert(sendData.end(), soundBuffer, soundBuffer + audioBuffer_pos);

//                 ssize_t sentBytes = send(sockfd, soundBuffer, audioBuffer_pos, 0);
//                 if (sentBytes > 0) {
//                     SendConsole.push_back("Send audio data success!\n");
//                 } else {
//                     SendConsole.push_back("error sending audio data");
//                 }
//             } 
//         }

//         // A キーが離されたら音声送信を停止
//         if (init && Controller::IsKeyReleased(Key::A)) {
//             if (R_FAILED(MICU_StopSampling())) {
//                 SendConsole.push_back("Sampling could not be stopped.\n");
//             } else {
//                 SendConsole.push_back("Sampling has been halted.\n");
//             }
//         }

//         // B キーが押されたらループ終了
//         if (Controller::IsKeyPressed(Key::B)) {
//             break;
//         }

//         ThreadEx::Yield();
//     }

//     svcExitThread();
// }

// // Receive Thread
// void VoiceReceiveThread(void *arg) {
//     int sockfd = *((int *)arg);
//     svcCreateEvent(&restartReceiveEvent, RESET_ONESHOT);
//     svcClearEvent(restartReceiveEvent);

//     Handle handles[] = {exitThreadEvent, restartReceiveEvent};

//     while (1) {
//         Result res;
//         static u8 buf[4096];

//         s32 index;
//         if ((res = svcWaitSynchronizationN(&index, handles, 2, false, 1)) != 0x09401BFE && R_SUCCEEDED(res)) {
//             if (index == 0)
//                 break;
            
//             svcClearEvent(restartReceiveEvent);
//             currentIndex = (currentIndex + 1) % 2;
//             receivedData[currentIndex].clear();
//         }

//         int received = recv(sockfd, buf, sizeof(buf), 0);
//         if (received == -1 || received == 0)
//             continue;

//         receivedData[currentIndex].insert(receivedData[currentIndex].end(), buf, buf + received);

//         // 音声データを受信したことを通知
//         svcSignalEvent(restartReceiveEvent);
//     }
//     svcCloseHandle(restartReceiveEvent);

//     svcExitThread();
// }


// // 親スレッド
// void ParentThread(void *arg)
// {
//     int sockfd = *((int *)arg);
   
//     svcCreateEvent(&sendEvent, RESET_STICKY);
//     svcCreateEvent(&stopSendEvent, RESET_STICKY);
//     svcCreateEvent(&restartReceiveEvent, RESET_ONESHOT);
//     svcCreateEvent(&exitThreadEvent, RESET_ONESHOT);
    
//     // 子スレッドの初期化
//     static ThreadEx sendThread(VoiceSendThread, 4096, 0x30, -1);
//     static ThreadEx recvThread(VoiceReceiveThread, 4096, 0x30, -1);

//     // 子スレッドの開始
//     sendThread.Start(&sockfd);
//     recvThread.Start(&sockfd);


//     while (1)
//     {
//         // 音声データの到着を待つ
//         svcWaitSynchronization(restartReceiveEvent, U64_MAX);
//         // 音声を再生するためのシグナルを送る
//         ncsndSetVolume(0x8, 1, 0);
//         ncsndSetRate(0x8, 16360, 1);
//         svcFlushProcessDataCache(CUR_PROCESS_HANDLE, (u32)receivedSoundBuffer, dataSize);
//         ncsndSound receivedSound;
//         ncsndInitializeSound(&receivedSound);

//         receivedSound.isPhysAddr = true; // 物理アドレス設定
//         receivedSound.sampleData = (u8 *)svcConvertVAToPA((const void*)receivedSoundBuffer, false); // 受信した音声データをセット
//         receivedSound.totalSizeBytes = dataSize; // 受信した音声データのサイズをセット
//         receivedSound.encoding = NCSND_ENCODING_PCM16; // 16ビットPCM
//         receivedSound.sampleRate = 16360; // サンプリングレートを設定
//         receivedSound.pan = 0.0;
//         receivedSound.volume = 1.0;
//         // サウンドを再生する
//         if (R_FAILED(ncsndPlaySound(0x8, &receivedSound))) 
//             ReceiveConsole.push_back("Failed to play received sound\n");
//         else   
//             ReceiveConsole.push_back("play received sound!\n");

//         svcSignalEvent(exitThreadEvent);

//         ThreadEx::Yield();
//     }
//     svcExitThread();
// }

// // サーバー側のエントリーポイント
// void VoiceChatServer(MenuEntry *entry) {
//     int sockfd_server = socket(AF_INET, SOCK_STREAM, 0);
//     if (sockfd_server < 0) {
//         OSD::Notify("Error creating socket\n");
//         return;
//     }

//     if (g_serverIP.empty()) {
//         MessageBox("IP Address not provided")();
//         return;
//     }

//     OSD::Notify("Socket creation successful!\n");
    
//     struct sockaddr_in serverAddr;
//     memset(&serverAddr, 0, sizeof(serverAddr));
//     serverAddr.sin_family = AF_INET;
//     serverAddr.sin_port = htons(g_port);
//     serverAddr.sin_addr.s_addr = inet_addr(g_serverIP/*ipAddress*/.c_str());

//     if (bind(sockfd_server, (const struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {
//         OSD::Notify("Error binding socket\n");
//         close(sockfd_server);
//         return;
//     } else{
//         OSD::Notify("Binding successful!\n");

//         if (listen(sockfd_server, 1) < 0) {
//             OSD::Notify("Error listening for connections\n");
//             close(sockfd_server);
//             return;
//         } 
//         else{
//             OSD::Notify("Listen successful!\n");
          
//             struct sockaddr_in clientAddr;
//             socklen_t clientLen = sizeof(clientAddr);
//             int new_sockfd = accept(sockfd_server, (struct sockaddr *)&clientAddr, &clientLen);
//             if (new_sockfd == -1) {
//                 OSD::Notify("Error accepting connection\n");
//                 close(sockfd_server);
//                 return;
//             } 

//             else
//             {   
//                 OSD::Notify("Connection established\n");
//                 const Screen &screen = OSD::GetTopScreen();
//                 static ThreadEx ServerThread(ParentThread, 4096, 0x30, -1);
//                 ServerThread.Start(&new_sockfd);
                
//                 while(1)
//                 {
//                     while (11 < ReceiveConsole.size())
//                         ReceiveConsole.erase(ReceiveConsole.begin());

//                     screen.DrawRect(30, 20, 340, 200, Color::Black);
//                     screen.DrawRect(32, 22, 336, 196, Color::Magenta, false);
//                     for (const auto &log : ReceiveConsole)
//                         screen.DrawSysfont(log, 35, 22 + (&log - &ReceiveConsole[0]) * 18);

//                     OSD::SwapBuffers();
//                 }
//             }
//         }
//     }
// }

// // クライアント側のエントリーポイント
// void VoiceChatClient(MenuEntry *entry) {

//       if (g_serverIP.empty()) {
//         MessageBox("IP Address not provided")();
//         return;
//     }
//     int sockfd_client = socket(AF_INET, SOCK_STREAM, 0);
//     CloseGameMicHandle();
//     Result ret = RL_SUCCESS;
//     init = true;

//     if (sockfd_client < 0) {
//         MessageBox("Error creating socket")();
//         return;
//     } 
//     OSD::Notify("Socket creation successful!", Color::LimeGreen);

//     struct sockaddr_in serverAddr;
//     memset(&serverAddr, 0, sizeof(serverAddr));
//     serverAddr.sin_family = AF_INET;
//     serverAddr.sin_port = htons(g_port);
//     serverAddr.sin_addr.s_addr = inet_addr(g_serverIP.c_str());
    
//     if (connect(sockfd_client, (const struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {
//         MessageBox("Error connecting to server")();
//         return;
//     } 

//     if (R_FAILED(ncsndInit(false))) {

//         SendConsole.push_back("Failed to initialize sound.\n");
//         init = false;
//     }
//     if (!micBuffer)
//         ret = svcControlMemoryUnsafe((u32 *)&micBuffer, MIC_BUFFER_ADDR, MIC_BUFFER_SIZE, MemOp(MEMOP_ALLOC | MEMOP_REGION_SYSTEM), MemPerm(MEMPERM_READ | MEMPERM_WRITE));
    
//     if (R_FAILED(ret)) {
//         SendConsole.push_back("MIC buffer memory allocation failed.\n");
//         init = false;
//     }
//     else if (R_FAILED(micInit(micBuffer, MIC_BUFFER_SIZE))) {
//         SendConsole.push_back("Failed to initialize MIC.\n");
//         init = false;
//     }
//     if(!soundBuffer){
//         ret = svcControlMemoryUnsafe((u32 *)&soundBuffer, SOUND_BUFFER_ADDR, SOUND_BUFFER_SIZE, MemOp(MEMOP_ALLOC | MEMREGION_SYSTEM), MemPerm(MEMPERM_READ | MEMPERM_WRITE));
//     }
//     else
//         ret = RL_SUCCESS;
//     if (R_FAILED(ret) || !soundBuffer) {

//         SendConsole.push_back("Failed to allocate memory for the sound buffer.\n");
//         init = false;
//     }

//     Sleep(Milliseconds(500));

//     if (init)
//         SendConsole.push_back("Speak while pressing A.\n");
//     SendConsole.push_back("Press B to exit.\n");


//     static ThreadEx ClientThread(ParentThread, 4096, 0x30, -1);
//     ClientThread.Start(&sockfd_client);
//     const Screen &screen = OSD::GetTopScreen();
//     while(1)
//     {
//         while (11 < SendConsole.size())
//             SendConsole.erase(SendConsole.begin());

//         screen.DrawRect(30, 20, 340, 200, Color::Black);
//         screen.DrawRect(32, 22, 336, 196, Color::Magenta, false);
//         for (const auto &log : SendConsole)
//             screen.DrawSysfont(log, 35, 22 + (&log - &SendConsole[0]) * 18);

//         OSD::SwapBuffers();
//     }
// }


// bool CloseGameMicHandle(void)
//     {
//         Handle handles[0x100];
//         s32 nbHandles;
            
//         nbHandles = svcControlProcess(CUR_PROCESS_HANDLE, PROCESSOP_GET_ALL_HANDLES, (u32)handles, 0);

//         for(s32 i = 0; i < nbHandles; i++)
//         {
//             char name[12];

//             if(R_SUCCEEDED(svcControlService(SERVICEOP_GET_NAME, name, handles[i])) && strcmp(name, "mic:u") == 0)
//             {
//                 svcCloseHandle(handles[i]);
//                 return true;
//             }
//         }

//         return false;
//     }
// }